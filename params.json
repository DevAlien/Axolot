{"name":"Axolot","tagline":"API-driven realtime framework","body":"### Axolot (Another node.js framework?)\r\nI needed something similar to sails.js but that I could update, for example, socket.io and it was much simpler, without having everything out of the box. So I basically took out everything I liked about it and made a smaller version with some different features.\r\n\r\n### Get Started\r\nAxolot comes bundled with a command line tool which can be used to easily create a new project \r\n```\r\n$ npm install axolot -g\r\n$ axolot new demoproject\r\n$ cd demoproject\r\n```\r\n\r\nOnce you are in the folder of your project, you will have a simple structure\r\n* api - Folder containing basically all your code (controllers, models, services, etc.)\r\n* config - Folder containing various configuration files\r\n* app.js - Your entry point\r\n\r\nTo start the app you have 2 different ways use `gulp`, which is good in development since it will restart when you edit a file, or simply use `npm start`\r\n\r\n### Models\r\nFor the models I choose to use Waterline from the guys of sails.js I find it simple to use and it does the job.\r\nBasically you can add a model inside the folder `api/models`.\r\n\r\nExample `api/models/user.js`\r\n\r\n```javascript\r\n    module.exports = {\r\n\r\n        identity: 'user'\r\n        attributes: {\r\n            username: { type: 'string', required: true },\r\n            password: { type: 'string', minLength: 6, required: true },\r\n            // Lifecycle Callbacks\r\n            beforeCreate: function(values, next) {\r\n                bcrypt.hash(values.password, 10, function(err, hash) {\r\n                    if(err) return next(err);\r\n                    values.password = hash;\r\n                    next();\r\n                });\r\n            }\r\n        }\r\n    };\r\n```\r\n\r\nIf you don't know how Waterline works you can refer to their documentation: https://github.com/balderdashy/waterline-docs\r\n\r\n### Controllers\r\nControllers is where you define your endpoints (routing). A Controller can be associated with a model, and in this way, the CRUD operations will be there automatically, but you can always override them. Controllers are stored in `api/controllers`\r\n\r\nControllers can also have socket.io methods which are callable from socket.io-client with `controllername:method``\r\n\r\nExample `api/controllers/user.js`\r\n```javascript\r\n    module.exports = {\r\n        model: 'user', // We are attaching the user to the model, so CRUD operations are there (good for dev purposes)\r\n        path: '/user', // Tthis is the end point\r\n\r\n        actions: {\r\n            'get /': [\r\n                function (req, res) {\r\n                    var query = {};\r\n\r\n                    Model.user.find(query).then(function(user) { // Find from the User Model declared above\r\n                        res.send(user);\r\n                    }).catch(function (err){\r\n                        res.send(400, err);\r\n                    });\r\n                }],\r\n        },\r\n        sockets: {\r\n            getSingle: function(userId, cb) { // This one is callable from socket.io using \"user:getSingle\r\n                Model.user.findOne(userId).then(function(user) {\r\n                    cb(user)\r\n                }).catch(function (err){\r\n                    cb({error: err})\r\n                });\r\n            }\r\n        }\r\n    };\r\n```\r\n### Services\r\nServices are simply some support objects that can help us doing something. For example we could create a service to  send emails. Services are accessible globally through the variable `Service` and are stored in `api/services`.\r\n\r\nExample `api/services/mailer.js` which will be callable from `Service.mailer.send`\r\n```javascript\r\n    var nodemailer = require('nodemailer');\r\n\r\n    module.exports = {\r\n\r\n        /**\r\n         * Sends an email to a given recipient\r\n         * @method send\r\n         * @param {object}   email           an object containing all of the necessary data to email\r\n         * @param {Function} cb[err, res]    the callback to call once email is sent, or if it fails\r\n         * @return\r\n         */\r\n        send: function (email, cb) {\r\n            var config = this.config;\r\n            /** sets up the modemailer smtp transport */\r\n            var transport = nodemailer.createTransport(config.nodemailer.type, {\r\n                service: config.nodemailer.service,\r\n                auth: {\r\n                    user: config.nodemailer.user,\r\n                    pass: config.nodemailer.pass\r\n                }\r\n            });\r\n\r\n            /** sets up the mail options, from and such like that **/\r\n            var from = email.from || 'nobody@nobody.com';\r\n            var subject;\r\n            if (config.nodemailer.prependSubject) {\r\n                subject = config.nodemailer.prependSubject + email.subject;\r\n            } else {\r\n                subject = email.subject;\r\n            }\r\n\r\n            var mailOptions = {\r\n                from: email.name + '<' + from + '>',\r\n                to: email.to,\r\n                subject: subject,\r\n                html: email.messageHtml\r\n            };\r\n\r\n            /** Actually sends the email */\r\n            transport.sendMail(mailOptions, function (err, response) {\r\n                if (err) return cb(err);\r\n                return cb(null, response);\r\n            });\r\n        }\r\n    };\r\n```\r\n\r\n### Config\r\nConfiguration can be separated by environments\r\n\r\n### CLI\r\nWith the CLI you can create new projects and you can access an interactive console, loading your code as well. This is good for testing something and/or debugging.\r\n\r\nTo generate a new project is pretty easy, after you created it you can mode into that folder (same name of the project) and start coding.\r\n```\r\n$ axolot new projectName\r\n```\r\n\r\nTo enter in the interactive console, you have to be in the folder of an axolot project. You can select the environment (which is basically the config filename).\r\n```\r\n$ axolot console environment\r\n```\r\n\r\nMore commands will comoe shortly.\r\n\r\n### Support & Contact\r\nYou can drop me an email at g@margalho.info or ask a question in StackOverflow or simply open an issue on GitHub.com\r\n\r\nMore updats will come soon.","google":"UA-67500883-1","note":"Don't delete this file! It's used internally to help with page regeneration."}